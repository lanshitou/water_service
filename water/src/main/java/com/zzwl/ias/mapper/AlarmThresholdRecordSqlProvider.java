package com.zzwl.ias.mapper;

import com.zzwl.ias.domain.AlarmThresholdRecord;
import org.apache.ibatis.jdbc.SQL;

public class AlarmThresholdRecordSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alarm_threshold
     *
     * @mbg.generated
     */
    public String insertSelective(AlarmThresholdRecord record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("alarm_threshold");

        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }

        if (record.getSensorId() != null) {
            sql.VALUES("sensor_id", "#{sensorId,jdbcType=BIGINT}");
        }

        if (record.getDataType() != null) {
            sql.VALUES("data_type", "#{dataType,jdbcType=INTEGER}");
        }

        if (record.getAlarmType() != null) {
            sql.VALUES("alarm_type", "#{alarmType,jdbcType=INTEGER}");
        }

        if (record.getAlarmLevel() != null) {
            sql.VALUES("alarm_level", "#{alarmLevel,jdbcType=TINYINT}");
        }

        if (record.getThreshold() != null) {
            sql.VALUES("threshold", "#{threshold,jdbcType=INTEGER}");
        }

        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=TINYINT}");
        }

        if (record.getOccurTime() != null) {
            sql.VALUES("occur_time", "#{occurTime,jdbcType=TIMESTAMP}");
        }

        if (record.getEndReason() != null) {
            sql.VALUES("end_reason", "#{endReason,jdbcType=INTEGER}");
        }

        if (record.getEndTime() != null) {
            sql.VALUES("end_time", "#{endTime,jdbcType=TIMESTAMP}");
        }

        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=INTEGER}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table alarm_threshold
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(AlarmThresholdRecord record) {
        SQL sql = new SQL();
        sql.UPDATE("alarm_threshold");

        if (record.getSensorId() != null) {
            sql.SET("sensor_id = #{sensorId,jdbcType=BIGINT}");
        }

        if (record.getDataType() != null) {
            sql.SET("data_type = #{dataType,jdbcType=INTEGER}");
        }

        if (record.getAlarmType() != null) {
            sql.SET("alarm_type = #{alarmType,jdbcType=INTEGER}");
        }

        if (record.getAlarmLevel() != null) {
            sql.SET("alarm_level = #{alarmLevel,jdbcType=TINYINT}");
        }

        if (record.getThreshold() != null) {
            sql.SET("threshold = #{threshold,jdbcType=INTEGER}");
        }

        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=TINYINT}");
        }

        if (record.getOccurTime() != null) {
            sql.SET("occur_time = #{occurTime,jdbcType=TIMESTAMP}");
        }

        if (record.getEndReason() != null) {
            sql.SET("end_reason = #{endReason,jdbcType=INTEGER}");
        }

        if (record.getEndTime() != null) {
            sql.SET("end_time = #{endTime,jdbcType=TIMESTAMP}");
        }

        if (record.getUserId() != null) {
            sql.SET("user_id = #{userId,jdbcType=INTEGER}");
        }

        sql.WHERE("id = #{id,jdbcType=INTEGER}");

        return sql.toString();
    }
}