package com.zzwl.ias.mapper;

import com.zzwl.ias.domain.ControllerStatusRecord;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

public interface ControllerStatusRecordMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @Delete({
            "delete from controller_status_log",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @Insert({
            "insert into controller_status_log (id, device_id, ",
            "time, battery_vol, ",
            "battery_with_solar_vol, solar_panel_vol, ",
            "signal_strength, board_temp)",
            "values (#{id,jdbcType=BIGINT}, #{deviceId,jdbcType=BIGINT}, ",
            "#{time,jdbcType=TIMESTAMP}, #{batteryVol,jdbcType=INTEGER}, ",
            "#{batteryWithSolarVol,jdbcType=INTEGER}, #{solarPanelVol,jdbcType=INTEGER}, ",
            "#{signalStrength,jdbcType=INTEGER}, #{boardTemp,jdbcType=INTEGER})"
    })
    int insert(ControllerStatusRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @InsertProvider(type = ControllerStatusRecordSqlProvider.class, method = "insertSelective")
    int insertSelective(ControllerStatusRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @Select({
            "select",
            "id, device_id, time, battery_vol, battery_with_solar_vol, solar_panel_vol, signal_strength, ",
            "board_temp",
            "from controller_status_log",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "device_id", property = "deviceId", jdbcType = JdbcType.BIGINT),
            @Result(column = "time", property = "time", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "battery_vol", property = "batteryVol", jdbcType = JdbcType.INTEGER),
            @Result(column = "battery_with_solar_vol", property = "batteryWithSolarVol", jdbcType = JdbcType.INTEGER),
            @Result(column = "solar_panel_vol", property = "solarPanelVol", jdbcType = JdbcType.INTEGER),
            @Result(column = "signal_strength", property = "signalStrength", jdbcType = JdbcType.INTEGER),
            @Result(column = "board_temp", property = "boardTemp", jdbcType = JdbcType.INTEGER)
    })
    ControllerStatusRecord selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @UpdateProvider(type = ControllerStatusRecordSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(ControllerStatusRecord record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table controller_status_log
     *
     * @mbg.generated
     */
    @Update({
            "update controller_status_log",
            "set device_id = #{deviceId,jdbcType=BIGINT},",
            "time = #{time,jdbcType=TIMESTAMP},",
            "battery_vol = #{batteryVol,jdbcType=INTEGER},",
            "battery_with_solar_vol = #{batteryWithSolarVol,jdbcType=INTEGER},",
            "solar_panel_vol = #{solarPanelVol,jdbcType=INTEGER},",
            "signal_strength = #{signalStrength,jdbcType=INTEGER},",
            "board_temp = #{boardTemp,jdbcType=INTEGER}",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(ControllerStatusRecord record);
}